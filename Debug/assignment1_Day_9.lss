
assignment1_Day_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000023b4  00002428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001734  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dbd  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000493d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007721  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000084d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000088bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000908b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8d 0c 	call	0x191a	; 0x191a <main>
      7a:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDirection)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((A_u8PortNo <= DIO_PORTD) && (A_u8PinNo <= DIO_PIN7))
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <MDIO_voidSetPinDirection+0x22>
     b56:	ee c0       	rjmp	.+476    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <MDIO_voidSetPinDirection+0x2a>
     b5e:	ea c0       	rjmp	.+468    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
	{
		if ( A_u8PinDirection == DIO_PIN_OUTPUT )
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <MDIO_voidSetPinDirection+0x32>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <MDIO_voidSetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <MDIO_voidSetPinDirection+0x98>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <MDIO_voidSetPinDirection+0x5a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <MDIO_voidSetPinDirection+0x70>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <MDIO_voidSetPinDirection+0xc0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <MDIO_voidSetPinDirection+0xe8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,A_u8PinNo); break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <MDIO_voidSetPinDirection+0x8e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <MDIO_voidSetPinDirection+0x8a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: SET_BIT(DDRB_Register,A_u8PinNo); break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <MDIO_voidSetPinDirection+0xb6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <MDIO_voidSetPinDirection+0xb2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: SET_BIT(DDRC_Register,A_u8PinNo); break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <MDIO_voidSetPinDirection+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <MDIO_voidSetPinDirection+0xda>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: SET_BIT(DDRD_Register,A_u8PinNo); break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <MDIO_voidSetPinDirection+0x106>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <MDIO_voidSetPinDirection+0x102>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			}
		}

		else if ( A_u8PinDirection == DIO_PIN_INPUT )
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <MDIO_voidSetPinDirection+0x118>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <MDIO_voidSetPinDirection+0x182>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <MDIO_voidSetPinDirection+0x140>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <MDIO_voidSetPinDirection+0x158>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <MDIO_voidSetPinDirection+0x1ac>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <MDIO_voidSetPinDirection+0x156>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <MDIO_voidSetPinDirection+0x1d6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,A_u8PinNo); break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <MDIO_voidSetPinDirection+0x176>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <MDIO_voidSetPinDirection+0x172>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: CLR_BIT(DDRB_Register,A_u8PinNo); break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <MDIO_voidSetPinDirection+0x1a0>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <MDIO_voidSetPinDirection+0x19c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: CLR_BIT(DDRC_Register,A_u8PinNo); break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <MDIO_voidSetPinDirection+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <MDIO_voidSetPinDirection+0x1c6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: CLR_BIT(DDRD_Register,A_u8PinNo); break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <MDIO_voidSetPinDirection+0x1f4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <MDIO_voidSetPinDirection+0x1f0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
			}
		}
	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 A_u8Value )
{	
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
		if(A_u8Value==DIO_PIN_HIGH)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <MDIO_voidSetPinValue+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <MDIO_voidSetPinValue+0x100>
		{
			switch (A_u8PortNo)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <MDIO_voidSetPinValue+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <MDIO_voidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <MDIO_voidSetPinValue+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <MDIO_voidSetPinValue+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <MDIO_voidSetPinValue+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: SET_BIT(PORTA,A_u8PinNo); break;
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <MDIO_voidSetPinValue+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <MDIO_voidSetPinValue+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB,A_u8PinNo); break;
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <MDIO_voidSetPinValue+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <MDIO_voidSetPinValue+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC,A_u8PinNo); break;
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <MDIO_voidSetPinValue+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <MDIO_voidSetPinValue+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD,A_u8PinNo); break;
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <MDIO_voidSetPinValue+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <MDIO_voidSetPinValue+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			}
		}
		else if(A_u8Value==DIO_PIN_LOW)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <MDIO_voidSetPinValue+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
		{
			switch (A_u8PortNo)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <MDIO_voidSetPinValue+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <MDIO_voidSetPinValue+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <MDIO_voidSetPinValue+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <MDIO_voidSetPinValue+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <MDIO_voidSetPinValue+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <MDIO_voidSetPinValue+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <MDIO_voidSetPinValue+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <MDIO_voidSetPinValue+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <MDIO_voidSetPinValue+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <MDIO_voidSetPinValue+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <MDIO_voidSetPinValue+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <MDIO_voidSetPinValue+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <MDIO_voidSetPinValue+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <MDIO_voidSetPinValue+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
			}
		}
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <MDIO_voidClrPinValue>:

void MDIO_voidClrPinValue (u8 A_u8PortNo , u8 A_u8PinNo )
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <MDIO_voidClrPinValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <MDIO_voidClrPinValue+0x8>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3c 83       	std	Y+4, r19	; 0x04
     f5e:	2b 83       	std	Y+3, r18	; 0x03
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	59 f1       	breq	.+86     	; 0xfc0 <MDIO_voidClrPinValue+0x7a>
     f6a:	2b 81       	ldd	r18, Y+3	; 0x03
     f6c:	3c 81       	ldd	r19, Y+4	; 0x04
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	2c f4       	brge	.+10     	; 0xf7e <MDIO_voidClrPinValue+0x38>
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	69 f0       	breq	.+26     	; 0xf96 <MDIO_voidClrPinValue+0x50>
     f7c:	5f c0       	rjmp	.+190    	; 0x103c <MDIO_voidClrPinValue+0xf6>
     f7e:	2b 81       	ldd	r18, Y+3	; 0x03
     f80:	3c 81       	ldd	r19, Y+4	; 0x04
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	89 f1       	breq	.+98     	; 0xfea <MDIO_voidClrPinValue+0xa4>
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <MDIO_voidClrPinValue+0x4e>
     f92:	40 c0       	rjmp	.+128    	; 0x1014 <MDIO_voidClrPinValue+0xce>
     f94:	53 c0       	rjmp	.+166    	; 0x103c <MDIO_voidClrPinValue+0xf6>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
     f96:	ab e3       	ldi	r26, 0x3B	; 59
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	eb e3       	ldi	r30, 0x3B	; 59
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <MDIO_voidClrPinValue+0x6e>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <MDIO_voidClrPinValue+0x6a>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	3e c0       	rjmp	.+124    	; 0x103c <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
     fc0:	a8 e3       	ldi	r26, 0x38	; 56
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e8 e3       	ldi	r30, 0x38	; 56
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <MDIO_voidClrPinValue+0x98>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <MDIO_voidClrPinValue+0x94>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	29 c0       	rjmp	.+82     	; 0x103c <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
     fea:	a5 e3       	ldi	r26, 0x35	; 53
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e3       	ldi	r30, 0x35	; 53
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <MDIO_voidClrPinValue+0xc2>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <MDIO_voidClrPinValue+0xbe>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	14 c0       	rjmp	.+40     	; 0x103c <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
    1014:	a2 e3       	ldi	r26, 0x32	; 50
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e2 e3       	ldi	r30, 0x32	; 50
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <MDIO_voidClrPinValue+0xec>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <MDIO_voidClrPinValue+0xe8>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
			}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <MDIO_voidGetPinValue>:

void MDIO_voidGetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 * A_PtrData )
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <MDIO_voidGetPinValue+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <MDIO_voidGetPinValue+0x8>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <MDIO_voidGetPinValue+0xa>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	6a 83       	std	Y+2, r22	; 0x02
    105c:	5c 83       	std	Y+4, r21	; 0x04
    105e:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3e 83       	std	Y+6, r19	; 0x06
    1068:	2d 83       	std	Y+5, r18	; 0x05
    106a:	4d 81       	ldd	r20, Y+5	; 0x05
    106c:	5e 81       	ldd	r21, Y+6	; 0x06
    106e:	41 30       	cpi	r20, 0x01	; 1
    1070:	51 05       	cpc	r21, r1
    1072:	c1 f1       	breq	.+112    	; 0x10e4 <MDIO_voidGetPinValue+0x9a>
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	91 05       	cpc	r25, r1
    107c:	34 f4       	brge	.+12     	; 0x108a <MDIO_voidGetPinValue+0x40>
    107e:	2d 81       	ldd	r18, Y+5	; 0x05
    1080:	3e 81       	ldd	r19, Y+6	; 0x06
    1082:	21 15       	cp	r18, r1
    1084:	31 05       	cpc	r19, r1
    1086:	71 f0       	breq	.+28     	; 0x10a4 <MDIO_voidGetPinValue+0x5a>
    1088:	8c c0       	rjmp	.+280    	; 0x11a2 <MDIO_voidGetPinValue+0x158>
    108a:	4d 81       	ldd	r20, Y+5	; 0x05
    108c:	5e 81       	ldd	r21, Y+6	; 0x06
    108e:	42 30       	cpi	r20, 0x02	; 2
    1090:	51 05       	cpc	r21, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <MDIO_voidGetPinValue+0x4c>
    1094:	47 c0       	rjmp	.+142    	; 0x1124 <MDIO_voidGetPinValue+0xda>
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <MDIO_voidGetPinValue+0x58>
    10a0:	61 c0       	rjmp	.+194    	; 0x1164 <MDIO_voidGetPinValue+0x11a>
    10a2:	7f c0       	rjmp	.+254    	; 0x11a2 <MDIO_voidGetPinValue+0x158>
			{
			case DIO_PORTA: *A_PtrData=GET_BIT(DIO_PINA,A_u8PinNo); break;
    10a4:	e9 e3       	ldi	r30, 0x39	; 57
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <MDIO_voidGetPinValue+0x74>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	2a 95       	dec	r18
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <MDIO_voidGetPinValue+0x70>
    10c2:	9a 01       	movw	r18, r20
    10c4:	28 23       	and	r18, r24
    10c6:	39 23       	and	r19, r25
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a9 01       	movw	r20, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <MDIO_voidGetPinValue+0x8c>
    10d2:	55 95       	asr	r21
    10d4:	47 95       	ror	r20
    10d6:	8a 95       	dec	r24
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <MDIO_voidGetPinValue+0x88>
    10da:	ca 01       	movw	r24, r20
    10dc:	eb 81       	ldd	r30, Y+3	; 0x03
    10de:	fc 81       	ldd	r31, Y+4	; 0x04
    10e0:	80 83       	st	Z, r24
    10e2:	5f c0       	rjmp	.+190    	; 0x11a2 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTB: *A_PtrData=GET_BIT(DIO_PINB,A_u8PinNo); break;
    10e4:	e6 e3       	ldi	r30, 0x36	; 54
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <MDIO_voidGetPinValue+0xb4>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	2a 95       	dec	r18
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <MDIO_voidGetPinValue+0xb0>
    1102:	9a 01       	movw	r18, r20
    1104:	28 23       	and	r18, r24
    1106:	39 23       	and	r19, r25
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <MDIO_voidGetPinValue+0xcc>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <MDIO_voidGetPinValue+0xc8>
    111a:	ca 01       	movw	r24, r20
    111c:	eb 81       	ldd	r30, Y+3	; 0x03
    111e:	fc 81       	ldd	r31, Y+4	; 0x04
    1120:	80 83       	st	Z, r24
    1122:	3f c0       	rjmp	.+126    	; 0x11a2 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTC: *A_PtrData=GET_BIT(DIO_PINC,A_u8PinNo); break;
    1124:	e3 e3       	ldi	r30, 0x33	; 51
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <MDIO_voidGetPinValue+0xf4>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	2a 95       	dec	r18
    1140:	e2 f7       	brpl	.-8      	; 0x113a <MDIO_voidGetPinValue+0xf0>
    1142:	9a 01       	movw	r18, r20
    1144:	28 23       	and	r18, r24
    1146:	39 23       	and	r19, r25
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <MDIO_voidGetPinValue+0x10c>
    1152:	55 95       	asr	r21
    1154:	47 95       	ror	r20
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <MDIO_voidGetPinValue+0x108>
    115a:	ca 01       	movw	r24, r20
    115c:	eb 81       	ldd	r30, Y+3	; 0x03
    115e:	fc 81       	ldd	r31, Y+4	; 0x04
    1160:	80 83       	st	Z, r24
    1162:	1f c0       	rjmp	.+62     	; 0x11a2 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTD: *A_PtrData=GET_BIT(DIO_PIND,A_u8PinNo); break;
    1164:	e0 e3       	ldi	r30, 0x30	; 48
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <MDIO_voidGetPinValue+0x134>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	2a 95       	dec	r18
    1180:	e2 f7       	brpl	.-8      	; 0x117a <MDIO_voidGetPinValue+0x130>
    1182:	9a 01       	movw	r18, r20
    1184:	28 23       	and	r18, r24
    1186:	39 23       	and	r19, r25
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <MDIO_voidGetPinValue+0x14c>
    1192:	55 95       	asr	r21
    1194:	47 95       	ror	r20
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <MDIO_voidGetPinValue+0x148>
    119a:	ca 01       	movw	r24, r20
    119c:	eb 81       	ldd	r30, Y+3	; 0x03
    119e:	fc 81       	ldd	r31, Y+4	; 0x04
    11a0:	80 83       	st	Z, r24
			}
}
    11a2:	26 96       	adiw	r28, 0x06	; 6
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (u8 A_u8PortNo , u8 A_u8PinNo)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <MDIO_voidTogglePinValue+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <MDIO_voidTogglePinValue+0x8>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3c 83       	std	Y+4, r19	; 0x04
    11cc:	2b 83       	std	Y+3, r18	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	49 f1       	breq	.+82     	; 0x122a <MDIO_voidTogglePinValue+0x76>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <MDIO_voidTogglePinValue+0x38>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	61 f0       	breq	.+24     	; 0x1202 <MDIO_voidTogglePinValue+0x4e>
    11ea:	5a c0       	rjmp	.+180    	; 0x12a0 <MDIO_voidTogglePinValue+0xec>
    11ec:	2b 81       	ldd	r18, Y+3	; 0x03
    11ee:	3c 81       	ldd	r19, Y+4	; 0x04
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	71 f1       	breq	.+92     	; 0x1252 <MDIO_voidTogglePinValue+0x9e>
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	e9 f1       	breq	.+122    	; 0x127a <MDIO_voidTogglePinValue+0xc6>
    1200:	4f c0       	rjmp	.+158    	; 0x12a0 <MDIO_voidTogglePinValue+0xec>
			{
			case DIO_PORTA: TOG_BIT(PORTA,A_u8PinNo); break;
    1202:	ab e3       	ldi	r26, 0x3B	; 59
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <MDIO_voidTogglePinValue+0x6c>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <MDIO_voidTogglePinValue+0x68>
    1224:	84 27       	eor	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	3b c0       	rjmp	.+118    	; 0x12a0 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTB: TOG_BIT(PORTB,A_u8PinNo); break;
    122a:	a8 e3       	ldi	r26, 0x38	; 56
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e8 e3       	ldi	r30, 0x38	; 56
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <MDIO_voidTogglePinValue+0x94>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <MDIO_voidTogglePinValue+0x90>
    124c:	84 27       	eor	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	27 c0       	rjmp	.+78     	; 0x12a0 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTC: TOG_BIT(PORTC,A_u8PinNo); break;
    1252:	a5 e3       	ldi	r26, 0x35	; 53
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <MDIO_voidTogglePinValue+0xbc>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <MDIO_voidTogglePinValue+0xb8>
    1274:	84 27       	eor	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	13 c0       	rjmp	.+38     	; 0x12a0 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTD: TOG_BIT(PORTD,A_u8PinNo); break;
    127a:	a2 e3       	ldi	r26, 0x32	; 50
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <MDIO_voidTogglePinValue+0xe4>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <MDIO_voidTogglePinValue+0xe0>
    129c:	84 27       	eor	r24, r20
    129e:	8c 93       	st	X, r24
			}
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (u8 A_u8PortNo , u8 A_u8PinDirection)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <MDIO_voidSetPortDirection+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <MDIO_voidSetPortDirection+0x8>
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3c 83       	std	Y+4, r19	; 0x04
    12c6:	2b 83       	std	Y+3, r18	; 0x03
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	91 05       	cpc	r25, r1
    12d0:	d1 f0       	breq	.+52     	; 0x1306 <MDIO_voidSetPortDirection+0x58>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	2c f4       	brge	.+10     	; 0x12e6 <MDIO_voidSetPortDirection+0x38>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	61 f0       	breq	.+24     	; 0x12fc <MDIO_voidSetPortDirection+0x4e>
    12e4:	1e c0       	rjmp	.+60     	; 0x1322 <MDIO_voidSetPortDirection+0x74>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	81 f0       	breq	.+32     	; 0x1310 <MDIO_voidSetPortDirection+0x62>
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	81 f0       	breq	.+32     	; 0x131a <MDIO_voidSetPortDirection+0x6c>
    12fa:	13 c0       	rjmp	.+38     	; 0x1322 <MDIO_voidSetPortDirection+0x74>
			{
			case DIO_PORTA: DDRA_Register= A_u8PinDirection; break;
    12fc:	ea e3       	ldi	r30, 0x3A	; 58
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTB: DDRB_Register= A_u8PinDirection; break;
    1306:	e7 e3       	ldi	r30, 0x37	; 55
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTC: DDRC_Register= A_u8PinDirection; break;
    1310:	e4 e3       	ldi	r30, 0x34	; 52
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTD: DDRD_Register= A_u8PinDirection; break;
    131a:	e1 e3       	ldi	r30, 0x31	; 49
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
			}
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue   (u8 A_u8PortNo  , u8 A_u8Value)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <MDIO_voidSetPortValue+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <MDIO_voidSetPortValue+0x8>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3c 83       	std	Y+4, r19	; 0x04
    1348:	2b 83       	std	Y+3, r18	; 0x03
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	d1 f0       	breq	.+52     	; 0x1388 <MDIO_voidSetPortValue+0x58>
    1354:	2b 81       	ldd	r18, Y+3	; 0x03
    1356:	3c 81       	ldd	r19, Y+4	; 0x04
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <MDIO_voidSetPortValue+0x38>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	61 f0       	breq	.+24     	; 0x137e <MDIO_voidSetPortValue+0x4e>
    1366:	1e c0       	rjmp	.+60     	; 0x13a4 <MDIO_voidSetPortValue+0x74>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <MDIO_voidSetPortValue+0x62>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	81 f0       	breq	.+32     	; 0x139c <MDIO_voidSetPortValue+0x6c>
    137c:	13 c0       	rjmp	.+38     	; 0x13a4 <MDIO_voidSetPortValue+0x74>
			{
			case DIO_PORTA: PORTA= A_u8Value; break;
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTB: PORTB= A_u8Value; break;
    1388:	e8 e3       	ldi	r30, 0x38	; 56
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTC: PORTC= A_u8Value; break;
    1392:	e5 e3       	ldi	r30, 0x35	; 53
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTD: PORTD= A_u8Value; break;
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
			}
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <MDIO_voidClrPortValue>:

void MDIO_voidClrPortValue (u8 A_u8PortNo)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <MDIO_voidClrPortValue+0x6>
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3b 83       	std	Y+3, r19	; 0x03
    13c8:	2a 83       	std	Y+2, r18	; 0x02
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	c9 f0       	breq	.+50     	; 0x1406 <MDIO_voidClrPortValue+0x54>
    13d4:	2a 81       	ldd	r18, Y+2	; 0x02
    13d6:	3b 81       	ldd	r19, Y+3	; 0x03
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <MDIO_voidClrPortValue+0x36>
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	9b 81       	ldd	r25, Y+3	; 0x03
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	61 f0       	breq	.+24     	; 0x13fe <MDIO_voidClrPortValue+0x4c>
    13e6:	1a c0       	rjmp	.+52     	; 0x141c <MDIO_voidClrPortValue+0x6a>
    13e8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ea:	3b 81       	ldd	r19, Y+3	; 0x03
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	71 f0       	breq	.+28     	; 0x140e <MDIO_voidClrPortValue+0x5c>
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	69 f0       	breq	.+26     	; 0x1416 <MDIO_voidClrPortValue+0x64>
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <MDIO_voidClrPortValue+0x6a>
			{
			case DIO_PORTA: PORTA= DIO_PORT_LOW; break;
    13fe:	eb e3       	ldi	r30, 0x3B	; 59
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	10 82       	st	Z, r1
    1404:	0b c0       	rjmp	.+22     	; 0x141c <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTB: PORTB= DIO_PORT_LOW; break;
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	10 82       	st	Z, r1
    140c:	07 c0       	rjmp	.+14     	; 0x141c <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTC: PORTC= DIO_PORT_LOW; break;
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
    1414:	03 c0       	rjmp	.+6      	; 0x141c <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTD: PORTD= DIO_PORT_LOW; break;
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	10 82       	st	Z, r1
			}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <MDIO_voidGetPortValue>:

void MDIO_voidGetPortValue (u8 A_u8PortNo  , u8 * A_PtrData )
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <MDIO_voidGetPortValue+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <MDIO_voidGetPortValue+0x8>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	7b 83       	std	Y+3, r23	; 0x03
    143a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	2c 83       	std	Y+4, r18	; 0x04
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	e1 f0       	breq	.+56     	; 0x1488 <MDIO_voidGetPortValue+0x60>
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <MDIO_voidGetPortValue+0x3c>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <MDIO_voidGetPortValue+0x52>
    1462:	26 c0       	rjmp	.+76     	; 0x14b0 <MDIO_voidGetPortValue+0x88>
    1464:	2c 81       	ldd	r18, Y+4	; 0x04
    1466:	3d 81       	ldd	r19, Y+5	; 0x05
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	a1 f0       	breq	.+40     	; 0x1496 <MDIO_voidGetPortValue+0x6e>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	b1 f0       	breq	.+44     	; 0x14a4 <MDIO_voidGetPortValue+0x7c>
    1478:	1b c0       	rjmp	.+54     	; 0x14b0 <MDIO_voidGetPortValue+0x88>
			{
			case DIO_PORTA: *A_PtrData= DIO_PINA; break;
    147a:	e9 e3       	ldi	r30, 0x39	; 57
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	ea 81       	ldd	r30, Y+2	; 0x02
    1482:	fb 81       	ldd	r31, Y+3	; 0x03
    1484:	80 83       	st	Z, r24
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTB: *A_PtrData= DIO_PINB; break;
    1488:	e6 e3       	ldi	r30, 0x36	; 54
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	ea 81       	ldd	r30, Y+2	; 0x02
    1490:	fb 81       	ldd	r31, Y+3	; 0x03
    1492:	80 83       	st	Z, r24
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTC: *A_PtrData= DIO_PINC; break;
    1496:	e3 e3       	ldi	r30, 0x33	; 51
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	ea 81       	ldd	r30, Y+2	; 0x02
    149e:	fb 81       	ldd	r31, Y+3	; 0x03
    14a0:	80 83       	st	Z, r24
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTD: *A_PtrData= DIO_PIND; break;
    14a4:	e0 e3       	ldi	r30, 0x30	; 48
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	ea 81       	ldd	r30, Y+2	; 0x02
    14ac:	fb 81       	ldd	r31, Y+3	; 0x03
    14ae:	80 83       	st	Z, r24
			}
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <MDIO_voidTogglePortValue>:

void MDIO_voidTogglePortValue (u8 A_u8PortNo)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <MDIO_voidTogglePortValue+0x6>
    14c6:	0f 92       	push	r0
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	89 83       	std	Y+1, r24	; 0x01
		switch (A_u8PortNo)
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3b 83       	std	Y+3, r19	; 0x03
    14d6:	2a 83       	std	Y+2, r18	; 0x02
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	91 05       	cpc	r25, r1
    14e0:	e9 f0       	breq	.+58     	; 0x151c <MDIO_voidTogglePortValue+0x5c>
    14e2:	2a 81       	ldd	r18, Y+2	; 0x02
    14e4:	3b 81       	ldd	r19, Y+3	; 0x03
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <MDIO_voidTogglePortValue+0x36>
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	9b 81       	ldd	r25, Y+3	; 0x03
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	61 f0       	breq	.+24     	; 0x150c <MDIO_voidTogglePortValue+0x4c>
    14f4:	2a c0       	rjmp	.+84     	; 0x154a <MDIO_voidTogglePortValue+0x8a>
    14f6:	2a 81       	ldd	r18, Y+2	; 0x02
    14f8:	3b 81       	ldd	r19, Y+3	; 0x03
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	b1 f0       	breq	.+44     	; 0x152c <MDIO_voidTogglePortValue+0x6c>
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	83 30       	cpi	r24, 0x03	; 3
    1506:	91 05       	cpc	r25, r1
    1508:	c9 f0       	breq	.+50     	; 0x153c <MDIO_voidTogglePortValue+0x7c>
    150a:	1f c0       	rjmp	.+62     	; 0x154a <MDIO_voidTogglePortValue+0x8a>
			{
			case DIO_PORTA: PORTA =~ PORTA; break;
    150c:	ab e3       	ldi	r26, 0x3B	; 59
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	eb e3       	ldi	r30, 0x3B	; 59
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 95       	com	r24
    1518:	8c 93       	st	X, r24
    151a:	17 c0       	rjmp	.+46     	; 0x154a <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTB: PORTB =~ PORTB; break;
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 95       	com	r24
    1528:	8c 93       	st	X, r24
    152a:	0f c0       	rjmp	.+30     	; 0x154a <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTC: PORTC =~ PORTC; break;
    152c:	a5 e3       	ldi	r26, 0x35	; 53
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e3       	ldi	r30, 0x35	; 53
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	80 95       	com	r24
    1538:	8c 93       	st	X, r24
    153a:	07 c0       	rjmp	.+14     	; 0x154a <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTD: PORTD =~ PORTD; break;
    153c:	a2 e3       	ldi	r26, 0x32	; 50
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e2 e3       	ldi	r30, 0x32	; 50
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 95       	com	r24
    1548:	8c 93       	st	X, r24
			}
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <MDIO_voidWriteHighNibbles>:


void MDIO_voidWriteHighNibbles ( u8 A_u8PORT , u8 A_u8value  )
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <MDIO_voidWriteHighNibbles+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <MDIO_voidWriteHighNibbles+0x8>
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3c 83       	std	Y+4, r19	; 0x04
    156e:	2b 83       	std	Y+3, r18	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	29 f1       	breq	.+74     	; 0x15c4 <MDIO_voidWriteHighNibbles+0x6e>
    157a:	2b 81       	ldd	r18, Y+3	; 0x03
    157c:	3c 81       	ldd	r19, Y+4	; 0x04
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	2c f4       	brge	.+10     	; 0x158e <MDIO_voidWriteHighNibbles+0x38>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	61 f0       	breq	.+24     	; 0x15a4 <MDIO_voidWriteHighNibbles+0x4e>
    158c:	4a c0       	rjmp	.+148    	; 0x1622 <MDIO_voidWriteHighNibbles+0xcc>
    158e:	2b 81       	ldd	r18, Y+3	; 0x03
    1590:	3c 81       	ldd	r19, Y+4	; 0x04
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	31 f1       	breq	.+76     	; 0x15e4 <MDIO_voidWriteHighNibbles+0x8e>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	89 f1       	breq	.+98     	; 0x1604 <MDIO_voidWriteHighNibbles+0xae>
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <MDIO_voidWriteHighNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0x0f;                   // make sure the high bits = 0000
    15a4:	ab e3       	ldi	r26, 0x3B	; 59
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	eb e3       	ldi	r30, 0x3B	; 59
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 70       	andi	r24, 0x0F	; 15
    15b0:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the high nibble of the port A by the given value
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	90 81       	ld	r25, Z
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	89 2b       	or	r24, r25
    15c0:	8c 93       	st	X, r24
    15c2:	2f c0       	rjmp	.+94     	; 0x1622 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0x0f;                 //Set only the high nibble of the port B by the given value
    15c4:	a8 e3       	ldi	r26, 0x38	; 56
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 70       	andi	r24, 0x0F	; 15
    15d0:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	90 81       	ld	r25, Z
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	89 2b       	or	r24, r25
    15e0:	8c 93       	st	X, r24
    15e2:	1f c0       	rjmp	.+62     	; 0x1622 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
    15e4:	a5 e3       	ldi	r26, 0x35	; 53
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e3       	ldi	r30, 0x35	; 53
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    15f2:	a5 e3       	ldi	r26, 0x35	; 53
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 81       	ld	r25, Z
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	89 2b       	or	r24, r25
    1600:	8c 93       	st	X, r24
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
    1604:	a2 e3       	ldi	r26, 0x32	; 50
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e2 e3       	ldi	r30, 0x32	; 50
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    1612:	a2 e3       	ldi	r26, 0x32	; 50
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e2 e3       	ldi	r30, 0x32	; 50
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
			break ;
		}
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <MDIO_voidWriteLowNibbles>:
void MDIO_voidWriteLowNibbles  ( u8 A_u8PORT , u8 A_u8value )
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <MDIO_voidWriteLowNibbles+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <MDIO_voidWriteLowNibbles+0x8>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	3c 83       	std	Y+4, r19	; 0x04
    1648:	2b 83       	std	Y+3, r18	; 0x03
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	91 05       	cpc	r25, r1
    1652:	29 f1       	breq	.+74     	; 0x169e <MDIO_voidWriteLowNibbles+0x6e>
    1654:	2b 81       	ldd	r18, Y+3	; 0x03
    1656:	3c 81       	ldd	r19, Y+4	; 0x04
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	2c f4       	brge	.+10     	; 0x1668 <MDIO_voidWriteLowNibbles+0x38>
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	61 f0       	breq	.+24     	; 0x167e <MDIO_voidWriteLowNibbles+0x4e>
    1666:	4a c0       	rjmp	.+148    	; 0x16fc <MDIO_voidWriteLowNibbles+0xcc>
    1668:	2b 81       	ldd	r18, Y+3	; 0x03
    166a:	3c 81       	ldd	r19, Y+4	; 0x04
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	31 f1       	breq	.+76     	; 0x16be <MDIO_voidWriteLowNibbles+0x8e>
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	83 30       	cpi	r24, 0x03	; 3
    1678:	91 05       	cpc	r25, r1
    167a:	89 f1       	breq	.+98     	; 0x16de <MDIO_voidWriteLowNibbles+0xae>
    167c:	3f c0       	rjmp	.+126    	; 0x16fc <MDIO_voidWriteLowNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0xf0;                   // make sure the low bits = 0000
    167e:	ab e3       	ldi	r26, 0x3B	; 59
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e3       	ldi	r30, 0x3B	; 59
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 7f       	andi	r24, 0xF0	; 240
    168a:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the low nibble of the port A by the given value
    168c:	ab e3       	ldi	r26, 0x3B	; 59
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e3       	ldi	r30, 0x3B	; 59
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	90 81       	ld	r25, Z
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	89 2b       	or	r24, r25
    169a:	8c 93       	st	X, r24
    169c:	2f c0       	rjmp	.+94     	; 0x16fc <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0xf0;                 //Set only the low nibble of the port B by the given value
    169e:	a8 e3       	ldi	r26, 0x38	; 56
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 7f       	andi	r24, 0xF0	; 240
    16aa:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    16ac:	a8 e3       	ldi	r26, 0x38	; 56
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e8 e3       	ldi	r30, 0x38	; 56
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	90 81       	ld	r25, Z
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	89 2b       	or	r24, r25
    16ba:	8c 93       	st	X, r24
    16bc:	1f c0       	rjmp	.+62     	; 0x16fc <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0xf0;                 //Set only the low nibble of the port C by the given value
    16be:	a5 e3       	ldi	r26, 0x35	; 53
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 7f       	andi	r24, 0xF0	; 240
    16ca:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    16cc:	a5 e3       	ldi	r26, 0x35	; 53
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e5 e3       	ldi	r30, 0x35	; 53
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	90 81       	ld	r25, Z
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	89 2b       	or	r24, r25
    16da:	8c 93       	st	X, r24
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0xf0;                 //Set only the low nibble of the port D by the given value
    16de:	a2 e3       	ldi	r26, 0x32	; 50
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e2 e3       	ldi	r30, 0x32	; 50
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 7f       	andi	r24, 0xF0	; 240
    16ea:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    16ec:	a2 e3       	ldi	r26, 0x32	; 50
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e2 e3       	ldi	r30, 0x32	; 50
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	90 81       	ld	r25, Z
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	89 2b       	or	r24, r25
    16fa:	8c 93       	st	X, r24
			break ;
		}
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <HLED_voidLEDIntialization>:

#include "LED_interface.h"
#include "LED_private.h  "

void HLED_voidLEDIntialization(LED_CONFIG LED)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <HLED_voidLEDIntialization+0x6>
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	69 83       	std	Y+1, r22	; 0x01
    1718:	7a 83       	std	Y+2, r23	; 0x02
    171a:	8b 83       	std	Y+3, r24	; 0x03
	MDIO_voidSetPinDirection (LED.port , LED.pin , LED.activeMode);
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	2b 81       	ldd	r18, Y+3	; 0x03
    1722:	69 2f       	mov	r22, r25
    1724:	42 2f       	mov	r20, r18
    1726:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidSetPinDirection>

}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <HLED_voidLEDOn>:

void HLED_voidLEDOn(LED_CONFIG LED)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <HLED_voidLEDOn+0x6>
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	69 83       	std	Y+1, r22	; 0x01
    1744:	7a 83       	std	Y+2, r23	; 0x02
    1746:	8b 83       	std	Y+3, r24	; 0x03
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED.activeMode);
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	69 2f       	mov	r22, r25
    1750:	42 2f       	mov	r20, r18
    1752:	0e 94 a3 06 	call	0xd46	; 0xd46 <MDIO_voidSetPinValue>
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <HLED_voidLEDIOff>:

void HLED_voidLEDIOff(LED_CONFIG LED)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <HLED_voidLEDIOff+0x6>
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	69 83       	std	Y+1, r22	; 0x01
    1770:	7a 83       	std	Y+2, r23	; 0x02
    1772:	8b 83       	std	Y+3, r24	; 0x03
	 MDIO_voidSetPinValue (LED.port , LED.pin , LED_ACTIVE_LOW);
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	69 2f       	mov	r22, r25
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 a3 06 	call	0xd46	; 0xd46 <MDIO_voidSetPinValue>
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <HLED_voidLEDToggle>:

void HLED_voidLEDToggle(LED_CONFIG LED)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <HLED_voidLEDToggle+0x6>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	69 83       	std	Y+1, r22	; 0x01
    179a:	7a 83       	std	Y+2, r23	; 0x02
    179c:	8b 83       	std	Y+3, r24	; 0x03
	MDIO_voidTogglePinValue (LED.port , LED.pin);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	69 2f       	mov	r22, r25
    17a4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <MDIO_voidTogglePinValue>
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <HSSD_voidSSDInitialization>:

static u8 Local_u8SSDNumbers[10] = SSD_NUMBER_CATHOD;


void HSSD_voidSSDInitialization (SSD_TYPE A_structSSDConfig)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <HSSD_voidSSDInitialization+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <HSSD_voidSSDInitialization+0x8>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	69 83       	std	Y+1, r22	; 0x01
    17c2:	7a 83       	std	Y+2, r23	; 0x02
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	9c 83       	std	Y+4, r25	; 0x04
	MDIO_voidSetPortDirection (A_structSSDConfig.DataPort , SSD_ON);
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	6f ef       	ldi	r22, 0xFF	; 255
    17cc:	0e 94 57 09 	call	0x12ae	; 0x12ae <MDIO_voidSetPortDirection>
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <HSSD_voidSSDOn>:

void HSSD_voidSSDOn            (SSD_TYPE A_structSSDConfig)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <HSSD_voidSSDOn+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <HSSD_voidSSDOn+0x8>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	69 83       	std	Y+1, r22	; 0x01
    17ec:	7a 83       	std	Y+2, r23	; 0x02
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	9c 83       	std	Y+4, r25	; 0x04
	if(A_structSSDConfig.Type== SSD_COMMON_CATHOD )
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	88 23       	and	r24, r24
    17f6:	99 f4       	brne	.+38     	; 0x181e <HSSD_voidSSDOn+0x40>
	{
		MDIO_voidSetPortValue   (A_structSSDConfig.DataPort , Local_u8SSDNumbers[0]);
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	90 91 68 00 	lds	r25, 0x0068
    17fe:	69 2f       	mov	r22, r25
    1800:	0e 94 98 09 	call	0x1330	; 0x1330 <MDIO_voidSetPortValue>
		MDIO_voidSetPinDirection(A_structSSDConfig.EnablePort , A_structSSDConfig.EnablePin ,SSD_PIN_HIGH );
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	69 2f       	mov	r22, r25
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinValue    (A_structSSDConfig.EnablePort , A_structSSDConfig.EnablePin ,SSD_PIN_LOW);
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	69 2f       	mov	r22, r25
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 a3 06 	call	0xd46	; 0xd46 <MDIO_voidSetPinValue>
    181c:	18 c0       	rjmp	.+48     	; 0x184e <HSSD_voidSSDOn+0x70>
	}
	else if(A_structSSDConfig.Type== SSD_COMMON_ANODE )
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	a9 f4       	brne	.+42     	; 0x184e <HSSD_voidSSDOn+0x70>
	{
		MDIO_voidSetPortValue   (A_structSSDConfig.DataPort , ~Local_u8SSDNumbers[0]);
    1824:	2a 81       	ldd	r18, Y+2	; 0x02
    1826:	80 91 68 00 	lds	r24, 0x0068
    182a:	98 2f       	mov	r25, r24
    182c:	90 95       	com	r25
    182e:	82 2f       	mov	r24, r18
    1830:	69 2f       	mov	r22, r25
    1832:	0e 94 98 09 	call	0x1330	; 0x1330 <MDIO_voidSetPortValue>
		MDIO_voidSetPinDirection(A_structSSDConfig.EnablePort , A_structSSDConfig.EnablePin ,SSD_PIN_HIGH );
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	69 2f       	mov	r22, r25
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinValue    (A_structSSDConfig.EnablePort , A_structSSDConfig.EnablePin ,SSD_PIN_HIGH );
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	69 2f       	mov	r22, r25
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 a3 06 	call	0xd46	; 0xd46 <MDIO_voidSetPinValue>
	}
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <HSSD_voidSSDOff>:

void HSSD_voidSSDOff            (SSD_TYPE A_structSSDConfig)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <HSSD_voidSSDOff+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <HSSD_voidSSDOff+0x8>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	69 83       	std	Y+1, r22	; 0x01
    186a:	7a 83       	std	Y+2, r23	; 0x02
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	9c 83       	std	Y+4, r25	; 0x04
	if(A_structSSDConfig.Type== SSD_COMMON_CATHOD )
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	88 23       	and	r24, r24
    1874:	51 f4       	brne	.+20     	; 0x188a <HSSD_voidSSDOff+0x2e>
	{
		MDIO_voidSetPinDirection(A_structSSDConfig.EnablePort , A_structSSDConfig.EnablePin ,SSD_PIN_LOW );
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	69 2f       	mov	r22, r25
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidSetPinDirection>
		MDIO_voidClrPortValue   (A_structSSDConfig.DataPort  );
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <MDIO_voidClrPortValue>
    1888:	0c c0       	rjmp	.+24     	; 0x18a2 <HSSD_voidSSDOff+0x46>
	}
	else if(A_structSSDConfig.Type== SSD_COMMON_ANODE )
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	49 f4       	brne	.+18     	; 0x18a2 <HSSD_voidSSDOff+0x46>
	{
		MDIO_voidSetPinDirection(A_structSSDConfig.EnablePort , A_structSSDConfig.EnablePin ,SSD_PIN_HIGH );
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	69 2f       	mov	r22, r25
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidSetPinDirection>
		MDIO_voidClrPortValue   (A_structSSDConfig.DataPort );
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <MDIO_voidClrPortValue>
	}
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <HSSD_voidSSDSendNumber>:

void HSSD_voidSSDSendNumber(SSD_TYPE A_structSSDConfig, u8 A_u8SSDNumber)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <HSSD_voidSSDSendNumber+0x6>
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <HSSD_voidSSDSendNumber+0x8>
    18b8:	0f 92       	push	r0
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	69 83       	std	Y+1, r22	; 0x01
    18c0:	7a 83       	std	Y+2, r23	; 0x02
    18c2:	8b 83       	std	Y+3, r24	; 0x03
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	4d 83       	std	Y+5, r20	; 0x05
	if(A_structSSDConfig.Type== SSD_COMMON_CATHOD )
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	88 23       	and	r24, r24
    18cc:	69 f4       	brne	.+26     	; 0x18e8 <HSSD_voidSSDSendNumber+0x38>
	{
		MDIO_voidSetPortValue(A_structSSDConfig.DataPort , Local_u8SSDNumbers[ A_u8SSDNumber]);
    18ce:	2a 81       	ldd	r18, Y+2	; 0x02
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	fc 01       	movw	r30, r24
    18d8:	e8 59       	subi	r30, 0x98	; 152
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	90 81       	ld	r25, Z
    18de:	82 2f       	mov	r24, r18
    18e0:	69 2f       	mov	r22, r25
    18e2:	0e 94 98 09 	call	0x1330	; 0x1330 <MDIO_voidSetPortValue>
    18e6:	11 c0       	rjmp	.+34     	; 0x190a <HSSD_voidSSDSendNumber+0x5a>
	}
	else if(A_structSSDConfig.Type== SSD_COMMON_ANODE )
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	71 f4       	brne	.+28     	; 0x190a <HSSD_voidSSDSendNumber+0x5a>
	{
		MDIO_voidSetPortValue(A_structSSDConfig.DataPort , ~Local_u8SSDNumbers[A_u8SSDNumber]);
    18ee:	2a 81       	ldd	r18, Y+2	; 0x02
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	fc 01       	movw	r30, r24
    18f8:	e8 59       	subi	r30, 0x98	; 152
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	98 2f       	mov	r25, r24
    1900:	90 95       	com	r25
    1902:	82 2f       	mov	r24, r18
    1904:	69 2f       	mov	r22, r25
    1906:	0e 94 98 09 	call	0x1330	; 0x1330 <MDIO_voidSetPortValue>
	}
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <main>:
SSD_TYPE SSD1={SSD_COMMON_CATHOD,SSD_PORTC,SSD_PORTC,SSD_PIN7};
SSD_TYPE SSD2={SSD_COMMON_CATHOD,SSD_PORTD,SSD_PORTC,SSD_PIN7};
#include <avr/delay.h>

int main(void)
{
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	c3 56       	subi	r28, 0x63	; 99
    1928:	d0 40       	sbci	r29, 0x00	; 0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
	HLED_voidLEDIntialization( LED1);
    1934:	60 91 72 00 	lds	r22, 0x0072
    1938:	70 91 73 00 	lds	r23, 0x0073
    193c:	80 91 74 00 	lds	r24, 0x0074
    1940:	0e 94 85 0b 	call	0x170a	; 0x170a <HLED_voidLEDIntialization>
	HLED_voidLEDIntialization( LED2);
    1944:	60 91 75 00 	lds	r22, 0x0075
    1948:	70 91 76 00 	lds	r23, 0x0076
    194c:	80 91 77 00 	lds	r24, 0x0077
    1950:	0e 94 85 0b 	call	0x170a	; 0x170a <HLED_voidLEDIntialization>
	HLED_voidLEDIntialization( LED3);
    1954:	60 91 78 00 	lds	r22, 0x0078
    1958:	70 91 79 00 	lds	r23, 0x0079
    195c:	80 91 7a 00 	lds	r24, 0x007A
    1960:	0e 94 85 0b 	call	0x170a	; 0x170a <HLED_voidLEDIntialization>


	HSSD_voidSSDInitialization(SSD1);
    1964:	80 91 7b 00 	lds	r24, 0x007B
    1968:	90 91 7c 00 	lds	r25, 0x007C
    196c:	a0 91 7d 00 	lds	r26, 0x007D
    1970:	b0 91 7e 00 	lds	r27, 0x007E
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <HSSD_voidSSDInitialization>
	HSSD_voidSSDInitialization(SSD2);
    197c:	80 91 7f 00 	lds	r24, 0x007F
    1980:	90 91 80 00 	lds	r25, 0x0080
    1984:	a0 91 81 00 	lds	r26, 0x0081
    1988:	b0 91 82 00 	lds	r27, 0x0082
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <HSSD_voidSSDInitialization>


	u8 counter=0;
    1994:	fe 01       	movw	r30, r28
    1996:	ed 59       	subi	r30, 0x9D	; 157
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	10 82       	st	Z, r1
	while(1){
		HLED_voidLEDOn(LED1);
    199c:	60 91 72 00 	lds	r22, 0x0072
    19a0:	70 91 73 00 	lds	r23, 0x0073
    19a4:	80 91 74 00 	lds	r24, 0x0074
    19a8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <HLED_voidLEDOn>
    19ac:	32 c2       	rjmp	.+1124   	; 0x1e12 <main+0x4f8>
		while(counter<=9)
		{
			HSSD_voidSSDSendNumber(SSD1,counter);
    19ae:	80 91 7b 00 	lds	r24, 0x007B
    19b2:	90 91 7c 00 	lds	r25, 0x007C
    19b6:	a0 91 7d 00 	lds	r26, 0x007D
    19ba:	b0 91 7e 00 	lds	r27, 0x007E
    19be:	fe 01       	movw	r30, r28
    19c0:	ed 59       	subi	r30, 0x9D	; 157
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	40 81       	ld	r20, Z
    19ca:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HSSD_voidSSDSendNumber>
			if(counter==9)
    19ce:	fe 01       	movw	r30, r28
    19d0:	ed 59       	subi	r30, 0x9D	; 157
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	89 30       	cpi	r24, 0x09	; 9
    19d8:	09 f0       	breq	.+2      	; 0x19dc <main+0xc2>
    19da:	8d c1       	rjmp	.+794    	; 0x1cf6 <main+0x3dc>
    19dc:	fe 01       	movw	r30, r28
    19de:	e1 5a       	subi	r30, 0xA1	; 161
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a8 ec       	ldi	r26, 0xC8	; 200
    19e8:	b2 e4       	ldi	r27, 0x42	; 66
    19ea:	80 83       	st	Z, r24
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	a2 83       	std	Z+2, r26	; 0x02
    19f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	8e 01       	movw	r16, r28
    19f4:	05 5a       	subi	r16, 0xA5	; 165
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	e1 5a       	subi	r30, 0xA1	; 161
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	f8 01       	movw	r30, r16
    1a18:	80 83       	st	Z, r24
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	a2 83       	std	Z+2, r26	; 0x02
    1a1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a20:	fe 01       	movw	r30, r28
    1a22:	e5 5a       	subi	r30, 0xA5	; 165
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	44 f4       	brge	.+16     	; 0x1a4e <main+0x134>
		__ticks = 1;
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e7 5a       	subi	r30, 0xA7	; 167
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
    1a4c:	64 c0       	rjmp	.+200    	; 0x1b16 <main+0x1fc>
	else if (__tmp > 65535)
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e5 5a       	subi	r30, 0xA5	; 165
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	60 81       	ld	r22, Z
    1a56:	71 81       	ldd	r23, Z+1	; 0x01
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	0c f0       	brlt	.+2      	; 0x1a6e <main+0x154>
    1a6c:	43 c0       	rjmp	.+134    	; 0x1af4 <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e1 5a       	subi	r30, 0xA1	; 161
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	07 5a       	subi	r16, 0xA7	; 167
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24
    1aa4:	1f c0       	rjmp	.+62     	; 0x1ae4 <main+0x1ca>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e9 5a       	subi	r30, 0xA9	; 169
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 5a       	subi	r30, 0xA9	; 169
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <main+0x1a4>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e9 5a       	subi	r30, 0xA9	; 169
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	de 01       	movw	r26, r28
    1ace:	a7 5a       	subi	r26, 0xA7	; 167
    1ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e7 5a       	subi	r30, 0xA7	; 167
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	9c 93       	st	X, r25
    1ae2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e7 5a       	subi	r30, 0xA7	; 167
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	d1 f6       	brne	.-76     	; 0x1aa6 <main+0x18c>
    1af2:	27 c0       	rjmp	.+78     	; 0x1b42 <main+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	8e 01       	movw	r16, r28
    1af6:	07 5a       	subi	r16, 0xA7	; 167
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	fe 01       	movw	r30, r28
    1afc:	e5 5a       	subi	r30, 0xA5	; 165
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	f8 01       	movw	r30, r16
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	de 01       	movw	r26, r28
    1b18:	ab 5a       	subi	r26, 0xAB	; 171
    1b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e7 5a       	subi	r30, 0xA7	; 167
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	8d 93       	st	X+, r24
    1b28:	9c 93       	st	X, r25
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	eb 5a       	subi	r30, 0xAB	; 171
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <main+0x21a>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	eb 5a       	subi	r30, 0xAB	; 171
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
			{
				_delay_ms(100);
				HSSD_voidSSDSendNumber(SSD1,1);
    1b42:	80 91 7b 00 	lds	r24, 0x007B
    1b46:	90 91 7c 00 	lds	r25, 0x007C
    1b4a:	a0 91 7d 00 	lds	r26, 0x007D
    1b4e:	b0 91 7e 00 	lds	r27, 0x007E
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HSSD_voidSSDSendNumber>
				HSSD_voidSSDSendNumber(SSD2,0);
    1b5c:	80 91 7f 00 	lds	r24, 0x007F
    1b60:	90 91 80 00 	lds	r25, 0x0080
    1b64:	a0 91 81 00 	lds	r26, 0x0081
    1b68:	b0 91 82 00 	lds	r27, 0x0082
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HSSD_voidSSDSendNumber>
    1b76:	fe 01       	movw	r30, r28
    1b78:	ef 5a       	subi	r30, 0xAF	; 175
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a8 ec       	ldi	r26, 0xC8	; 200
    1b82:	b2 e4       	ldi	r27, 0x42	; 66
    1b84:	80 83       	st	Z, r24
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	a2 83       	std	Z+2, r26	; 0x02
    1b8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	8e 01       	movw	r16, r28
    1b8e:	03 5b       	subi	r16, 0xB3	; 179
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	fe 01       	movw	r30, r28
    1b94:	ef 5a       	subi	r30, 0xAF	; 175
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a ef       	ldi	r20, 0xFA	; 250
    1ba6:	54 e4       	ldi	r21, 0x44	; 68
    1ba8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	a2 83       	std	Z+2, r26	; 0x02
    1bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e3 5b       	subi	r30, 0xB3	; 179
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	44 f4       	brge	.+16     	; 0x1be8 <main+0x2ce>
		__ticks = 1;
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e5 5b       	subi	r30, 0xB5	; 181
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	64 c0       	rjmp	.+200    	; 0x1cb0 <main+0x396>
	else if (__tmp > 65535)
    1be8:	fe 01       	movw	r30, r28
    1bea:	e3 5b       	subi	r30, 0xB3	; 179
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	0c f0       	brlt	.+2      	; 0x1c08 <main+0x2ee>
    1c06:	43 c0       	rjmp	.+134    	; 0x1c8e <main+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ef 5a       	subi	r30, 0xAF	; 175
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8e 01       	movw	r16, r28
    1c28:	05 5b       	subi	r16, 0xB5	; 181
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	f8 01       	movw	r30, r16
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
    1c3e:	1f c0       	rjmp	.+62     	; 0x1c7e <main+0x364>
    1c40:	fe 01       	movw	r30, r28
    1c42:	e7 5b       	subi	r30, 0xB7	; 183
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	88 ec       	ldi	r24, 0xC8	; 200
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	80 83       	st	Z, r24
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e7 5b       	subi	r30, 0xB7	; 183
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <main+0x33e>
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e7 5b       	subi	r30, 0xB7	; 183
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c66:	de 01       	movw	r26, r28
    1c68:	a5 5b       	subi	r26, 0xB5	; 181
    1c6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e5 5b       	subi	r30, 0xB5	; 181
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	11 96       	adiw	r26, 0x01	; 1
    1c7a:	9c 93       	st	X, r25
    1c7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e5 5b       	subi	r30, 0xB5	; 181
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	d1 f6       	brne	.-76     	; 0x1c40 <main+0x326>
    1c8c:	27 c0       	rjmp	.+78     	; 0x1cdc <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	8e 01       	movw	r16, r28
    1c90:	05 5b       	subi	r16, 0xB5	; 181
    1c92:	1f 4f       	sbci	r17, 0xFF	; 255
    1c94:	fe 01       	movw	r30, r28
    1c96:	e3 5b       	subi	r30, 0xB3	; 179
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	de 01       	movw	r26, r28
    1cb2:	a9 5b       	subi	r26, 0xB9	; 185
    1cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e5 5b       	subi	r30, 0xB5	; 181
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	8d 93       	st	X+, r24
    1cc2:	9c 93       	st	X, r25
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e9 5b       	subi	r30, 0xB9	; 185
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <main+0x3b4>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e9 5b       	subi	r30, 0xB9	; 185
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
				_delay_ms(100);
				HSSD_voidSSDOff (SSD2);
    1cdc:	80 91 7f 00 	lds	r24, 0x007F
    1ce0:	90 91 80 00 	lds	r25, 0x0080
    1ce4:	a0 91 81 00 	lds	r26, 0x0081
    1ce8:	b0 91 82 00 	lds	r27, 0x0082
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 2e 0c 	call	0x185c	; 0x185c <HSSD_voidSSDOff>
    1cf4:	95 c0       	rjmp	.+298    	; 0x1e20 <main+0x506>
				break;
			}
			else
				counter++;
    1cf6:	de 01       	movw	r26, r28
    1cf8:	ad 59       	subi	r26, 0x9D	; 157
    1cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ed 59       	subi	r30, 0x9D	; 157
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 5f       	subi	r24, 0xFF	; 255
    1d06:	8c 93       	st	X, r24
    1d08:	fe 01       	movw	r30, r28
    1d0a:	ed 5b       	subi	r30, 0xBD	; 189
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a8 ec       	ldi	r26, 0xC8	; 200
    1d14:	b2 e4       	ldi	r27, 0x42	; 66
    1d16:	80 83       	st	Z, r24
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	a2 83       	std	Z+2, r26	; 0x02
    1d1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	8e 01       	movw	r16, r28
    1d20:	01 5c       	subi	r16, 0xC1	; 193
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	fe 01       	movw	r30, r28
    1d26:	ed 5b       	subi	r30, 0xBD	; 189
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a ef       	ldi	r20, 0xFA	; 250
    1d38:	54 e4       	ldi	r21, 0x44	; 68
    1d3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	f8 01       	movw	r30, r16
    1d44:	80 83       	st	Z, r24
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	a2 83       	std	Z+2, r26	; 0x02
    1d4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ff 96       	adiw	r30, 0x3f	; 63
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <main+0x458>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9e af       	std	Y+62, r25	; 0x3e
    1d6e:	8d af       	std	Y+61, r24	; 0x3d
    1d70:	46 c0       	rjmp	.+140    	; 0x1dfe <main+0x4e4>
	else if (__tmp > 65535)
    1d72:	fe 01       	movw	r30, r28
    1d74:	ff 96       	adiw	r30, 0x3f	; 63
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	64 f5       	brge	.+88     	; 0x1de6 <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ed 5b       	subi	r30, 0xBD	; 189
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e2       	ldi	r20, 0x20	; 32
    1da2:	51 e4       	ldi	r21, 0x41	; 65
    1da4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9e af       	std	Y+62, r25	; 0x3e
    1dba:	8d af       	std	Y+61, r24	; 0x3d
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <main+0x4c2>
    1dbe:	88 ec       	ldi	r24, 0xC8	; 200
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9c af       	std	Y+60, r25	; 0x3c
    1dc4:	8b af       	std	Y+59, r24	; 0x3b
    1dc6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dc8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <main+0x4b0>
    1dce:	9c af       	std	Y+60, r25	; 0x3c
    1dd0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	9e af       	std	Y+62, r25	; 0x3e
    1dda:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <main+0x4a4>
    1de4:	16 c0       	rjmp	.+44     	; 0x1e12 <main+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	fe 01       	movw	r30, r28
    1de8:	ff 96       	adiw	r30, 0x3f	; 63
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e af       	std	Y+62, r25	; 0x3e
    1dfc:	8d af       	std	Y+61, r24	; 0x3d
    1dfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e02:	9a af       	std	Y+58, r25	; 0x3a
    1e04:	89 af       	std	Y+57, r24	; 0x39
    1e06:	89 ad       	ldd	r24, Y+57	; 0x39
    1e08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <main+0x4f0>
    1e0e:	9a af       	std	Y+58, r25	; 0x3a
    1e10:	89 af       	std	Y+57, r24	; 0x39


	u8 counter=0;
	while(1){
		HLED_voidLEDOn(LED1);
		while(counter<=9)
    1e12:	fe 01       	movw	r30, r28
    1e14:	ed 59       	subi	r30, 0x9D	; 157
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	8a 30       	cpi	r24, 0x0A	; 10
    1e1c:	08 f4       	brcc	.+2      	; 0x1e20 <main+0x506>
    1e1e:	c7 cd       	rjmp	.-1138   	; 0x19ae <main+0x94>
			}
			else
				counter++;
			_delay_ms(100);
		}
		HLED_voidLEDIOff(LED1);
    1e20:	60 91 72 00 	lds	r22, 0x0072
    1e24:	70 91 73 00 	lds	r23, 0x0073
    1e28:	80 91 74 00 	lds	r24, 0x0074
    1e2c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <HLED_voidLEDIOff>
		HSSD_voidSSDOff (SSD2);
    1e30:	80 91 7f 00 	lds	r24, 0x007F
    1e34:	90 91 80 00 	lds	r25, 0x0080
    1e38:	a0 91 81 00 	lds	r26, 0x0081
    1e3c:	b0 91 82 00 	lds	r27, 0x0082
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 2e 0c 	call	0x185c	; 0x185c <HSSD_voidSSDOff>

		counter=0;
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ed 59       	subi	r30, 0x9D	; 157
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	10 82       	st	Z, r1
		HLED_voidLEDOn(LED2);
    1e50:	60 91 75 00 	lds	r22, 0x0075
    1e54:	70 91 76 00 	lds	r23, 0x0076
    1e58:	80 91 77 00 	lds	r24, 0x0077
    1e5c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <HLED_voidLEDOn>
    1e60:	8b c0       	rjmp	.+278    	; 0x1f78 <main+0x65e>
		while(counter<=3)
		{
			HSSD_voidSSDSendNumber(SSD1,counter);
    1e62:	80 91 7b 00 	lds	r24, 0x007B
    1e66:	90 91 7c 00 	lds	r25, 0x007C
    1e6a:	a0 91 7d 00 	lds	r26, 0x007D
    1e6e:	b0 91 7e 00 	lds	r27, 0x007E
    1e72:	fe 01       	movw	r30, r28
    1e74:	ed 59       	subi	r30, 0x9D	; 157
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	40 81       	ld	r20, Z
    1e7e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HSSD_voidSSDSendNumber>

			counter++;
    1e82:	de 01       	movw	r26, r28
    1e84:	ad 59       	subi	r26, 0x9D	; 157
    1e86:	bf 4f       	sbci	r27, 0xFF	; 255
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ed 59       	subi	r30, 0x9D	; 157
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 81       	ld	r24, Z
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	8c 93       	st	X, r24
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a8 ec       	ldi	r26, 0xC8	; 200
    1e9a:	b2 e4       	ldi	r27, 0x42	; 66
    1e9c:	8d ab       	std	Y+53, r24	; 0x35
    1e9e:	9e ab       	std	Y+54, r25	; 0x36
    1ea0:	af ab       	std	Y+55, r26	; 0x37
    1ea2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eaa:	98 ad       	ldd	r25, Y+56	; 0x38
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a ef       	ldi	r20, 0xFA	; 250
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	89 ab       	std	Y+49, r24	; 0x31
    1ebe:	9a ab       	std	Y+50, r25	; 0x32
    1ec0:	ab ab       	std	Y+51, r26	; 0x33
    1ec2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eca:	9c a9       	ldd	r25, Y+52	; 0x34
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <main+0x5cc>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	98 ab       	std	Y+48, r25	; 0x30
    1ee2:	8f a7       	std	Y+47, r24	; 0x2f
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <main+0x64a>
	else if (__tmp > 65535)
    1ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eea:	8b a9       	ldd	r24, Y+51	; 0x33
    1eec:	9c a9       	ldd	r25, Y+52	; 0x34
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <main+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6d a9       	ldd	r22, Y+53	; 0x35
    1f00:	7e a9       	ldd	r23, Y+54	; 0x36
    1f02:	8f a9       	ldd	r24, Y+55	; 0x37
    1f04:	98 ad       	ldd	r25, Y+56	; 0x38
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <main+0x62c>
    1f28:	88 ec       	ldi	r24, 0xC8	; 200
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9e a7       	std	Y+46, r25	; 0x2e
    1f2e:	8d a7       	std	Y+45, r24	; 0x2d
    1f30:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f32:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <main+0x61a>
    1f38:	9e a7       	std	Y+46, r25	; 0x2e
    1f3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	98 ab       	std	Y+48, r25	; 0x30
    1f44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f48:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <main+0x60e>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <main+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	69 a9       	ldd	r22, Y+49	; 0x31
    1f52:	7a a9       	ldd	r23, Y+50	; 0x32
    1f54:	8b a9       	ldd	r24, Y+51	; 0x33
    1f56:	9c a9       	ldd	r25, Y+52	; 0x34
    1f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	98 ab       	std	Y+48, r25	; 0x30
    1f62:	8f a7       	std	Y+47, r24	; 0x2f
    1f64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f66:	98 a9       	ldd	r25, Y+48	; 0x30
    1f68:	9c a7       	std	Y+44, r25	; 0x2c
    1f6a:	8b a7       	std	Y+43, r24	; 0x2b
    1f6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <main+0x656>
    1f74:	9c a7       	std	Y+44, r25	; 0x2c
    1f76:	8b a7       	std	Y+43, r24	; 0x2b
		HLED_voidLEDIOff(LED1);
		HSSD_voidSSDOff (SSD2);

		counter=0;
		HLED_voidLEDOn(LED2);
		while(counter<=3)
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ed 59       	subi	r30, 0x9D	; 157
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <main+0x66c>
    1f84:	6e cf       	rjmp	.-292    	; 0x1e62 <main+0x548>
			HSSD_voidSSDSendNumber(SSD1,counter);

			counter++;
			_delay_ms(100);
		}
		HLED_voidLEDIOff(LED2);
    1f86:	60 91 75 00 	lds	r22, 0x0075
    1f8a:	70 91 76 00 	lds	r23, 0x0076
    1f8e:	80 91 77 00 	lds	r24, 0x0077
    1f92:	0e 94 b1 0b 	call	0x1762	; 0x1762 <HLED_voidLEDIOff>
		HSSD_voidSSDOff (SSD2);
    1f96:	80 91 7f 00 	lds	r24, 0x007F
    1f9a:	90 91 80 00 	lds	r25, 0x0080
    1f9e:	a0 91 81 00 	lds	r26, 0x0081
    1fa2:	b0 91 82 00 	lds	r27, 0x0082
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 2e 0c 	call	0x185c	; 0x185c <HSSD_voidSSDOff>

		counter=0;
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ed 59       	subi	r30, 0x9D	; 157
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	10 82       	st	Z, r1
		HLED_voidLEDOn(LED3);
    1fb6:	60 91 78 00 	lds	r22, 0x0078
    1fba:	70 91 79 00 	lds	r23, 0x0079
    1fbe:	80 91 7a 00 	lds	r24, 0x007A
    1fc2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <HLED_voidLEDOn>
    1fc6:	9d c1       	rjmp	.+826    	; 0x2302 <main+0x9e8>
		while(counter<=9)
		{
			HSSD_voidSSDSendNumber(SSD1,counter);
    1fc8:	80 91 7b 00 	lds	r24, 0x007B
    1fcc:	90 91 7c 00 	lds	r25, 0x007C
    1fd0:	a0 91 7d 00 	lds	r26, 0x007D
    1fd4:	b0 91 7e 00 	lds	r27, 0x007E
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ed 59       	subi	r30, 0x9D	; 157
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	40 81       	ld	r20, Z
    1fe4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HSSD_voidSSDSendNumber>
			if(counter==9)
    1fe8:	fe 01       	movw	r30, r28
    1fea:	ed 59       	subi	r30, 0x9D	; 157
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	89 30       	cpi	r24, 0x09	; 9
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <main+0x6dc>
    1ff4:	0b c1       	rjmp	.+534    	; 0x220c <main+0x8f2>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a8 ec       	ldi	r26, 0xC8	; 200
    1ffc:	b2 e4       	ldi	r27, 0x42	; 66
    1ffe:	8f a3       	std	Y+39, r24	; 0x27
    2000:	98 a7       	std	Y+40, r25	; 0x28
    2002:	a9 a7       	std	Y+41, r26	; 0x29
    2004:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2006:	6f a1       	ldd	r22, Y+39	; 0x27
    2008:	78 a5       	ldd	r23, Y+40	; 0x28
    200a:	89 a5       	ldd	r24, Y+41	; 0x29
    200c:	9a a5       	ldd	r25, Y+42	; 0x2a
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	8b a3       	std	Y+35, r24	; 0x23
    2020:	9c a3       	std	Y+36, r25	; 0x24
    2022:	ad a3       	std	Y+37, r26	; 0x25
    2024:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2026:	6b a1       	ldd	r22, Y+35	; 0x23
    2028:	7c a1       	ldd	r23, Y+36	; 0x24
    202a:	8d a1       	ldd	r24, Y+37	; 0x25
    202c:	9e a1       	ldd	r25, Y+38	; 0x26
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	2c f4       	brge	.+10     	; 0x2048 <main+0x72e>
		__ticks = 1;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9a a3       	std	Y+34, r25	; 0x22
    2044:	89 a3       	std	Y+33, r24	; 0x21
    2046:	3f c0       	rjmp	.+126    	; 0x20c6 <main+0x7ac>
	else if (__tmp > 65535)
    2048:	6b a1       	ldd	r22, Y+35	; 0x23
    204a:	7c a1       	ldd	r23, Y+36	; 0x24
    204c:	8d a1       	ldd	r24, Y+37	; 0x25
    204e:	9e a1       	ldd	r25, Y+38	; 0x26
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	3f ef       	ldi	r19, 0xFF	; 255
    2054:	4f e7       	ldi	r20, 0x7F	; 127
    2056:	57 e4       	ldi	r21, 0x47	; 71
    2058:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    205c:	18 16       	cp	r1, r24
    205e:	4c f5       	brge	.+82     	; 0x20b2 <main+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	6f a1       	ldd	r22, Y+39	; 0x27
    2062:	78 a5       	ldd	r23, Y+40	; 0x28
    2064:	89 a5       	ldd	r24, Y+41	; 0x29
    2066:	9a a5       	ldd	r25, Y+42	; 0x2a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9a a3       	std	Y+34, r25	; 0x22
    2086:	89 a3       	std	Y+33, r24	; 0x21
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <main+0x78e>
    208a:	88 ec       	ldi	r24, 0xC8	; 200
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	98 a3       	std	Y+32, r25	; 0x20
    2090:	8f 8f       	std	Y+31, r24	; 0x1f
    2092:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2094:	98 a1       	ldd	r25, Y+32	; 0x20
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <main+0x77c>
    209a:	98 a3       	std	Y+32, r25	; 0x20
    209c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	9a a1       	ldd	r25, Y+34	; 0x22
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9a a3       	std	Y+34, r25	; 0x22
    20a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	89 a1       	ldd	r24, Y+33	; 0x21
    20aa:	9a a1       	ldd	r25, Y+34	; 0x22
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f7       	brne	.-38     	; 0x208a <main+0x770>
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <main+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	6b a1       	ldd	r22, Y+35	; 0x23
    20b4:	7c a1       	ldd	r23, Y+36	; 0x24
    20b6:	8d a1       	ldd	r24, Y+37	; 0x25
    20b8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9a a3       	std	Y+34, r25	; 0x22
    20c4:	89 a3       	std	Y+33, r24	; 0x21
    20c6:	89 a1       	ldd	r24, Y+33	; 0x21
    20c8:	9a a1       	ldd	r25, Y+34	; 0x22
    20ca:	9e 8f       	std	Y+30, r25	; 0x1e
    20cc:	8d 8f       	std	Y+29, r24	; 0x1d
    20ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <main+0x7b8>
    20d6:	9e 8f       	std	Y+30, r25	; 0x1e
    20d8:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(100);
				HSSD_voidSSDSendNumber(SSD1,1);
    20da:	80 91 7b 00 	lds	r24, 0x007B
    20de:	90 91 7c 00 	lds	r25, 0x007C
    20e2:	a0 91 7d 00 	lds	r26, 0x007D
    20e6:	b0 91 7e 00 	lds	r27, 0x007E
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HSSD_voidSSDSendNumber>
				HSSD_voidSSDSendNumber(SSD2,0);
    20f4:	80 91 7f 00 	lds	r24, 0x007F
    20f8:	90 91 80 00 	lds	r25, 0x0080
    20fc:	a0 91 81 00 	lds	r26, 0x0081
    2100:	b0 91 82 00 	lds	r27, 0x0082
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HSSD_voidSSDSendNumber>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a8 ec       	ldi	r26, 0xC8	; 200
    2114:	b2 e4       	ldi	r27, 0x42	; 66
    2116:	89 8f       	std	Y+25, r24	; 0x19
    2118:	9a 8f       	std	Y+26, r25	; 0x1a
    211a:	ab 8f       	std	Y+27, r26	; 0x1b
    211c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211e:	69 8d       	ldd	r22, Y+25	; 0x19
    2120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a ef       	ldi	r20, 0xFA	; 250
    212c:	54 e4       	ldi	r21, 0x44	; 68
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8d 8b       	std	Y+21, r24	; 0x15
    2138:	9e 8b       	std	Y+22, r25	; 0x16
    213a:	af 8b       	std	Y+23, r26	; 0x17
    213c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    213e:	6d 89       	ldd	r22, Y+21	; 0x15
    2140:	7e 89       	ldd	r23, Y+22	; 0x16
    2142:	8f 89       	ldd	r24, Y+23	; 0x17
    2144:	98 8d       	ldd	r25, Y+24	; 0x18
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e8       	ldi	r20, 0x80	; 128
    214c:	5f e3       	ldi	r21, 0x3F	; 63
    214e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2152:	88 23       	and	r24, r24
    2154:	2c f4       	brge	.+10     	; 0x2160 <main+0x846>
		__ticks = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9c 8b       	std	Y+20, r25	; 0x14
    215c:	8b 8b       	std	Y+19, r24	; 0x13
    215e:	3f c0       	rjmp	.+126    	; 0x21de <main+0x8c4>
	else if (__tmp > 65535)
    2160:	6d 89       	ldd	r22, Y+21	; 0x15
    2162:	7e 89       	ldd	r23, Y+22	; 0x16
    2164:	8f 89       	ldd	r24, Y+23	; 0x17
    2166:	98 8d       	ldd	r25, Y+24	; 0x18
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	3f ef       	ldi	r19, 0xFF	; 255
    216c:	4f e7       	ldi	r20, 0x7F	; 127
    216e:	57 e4       	ldi	r21, 0x47	; 71
    2170:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2174:	18 16       	cp	r1, r24
    2176:	4c f5       	brge	.+82     	; 0x21ca <main+0x8b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2178:	69 8d       	ldd	r22, Y+25	; 0x19
    217a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    217c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9c 8b       	std	Y+20, r25	; 0x14
    219e:	8b 8b       	std	Y+19, r24	; 0x13
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <main+0x8a6>
    21a2:	88 ec       	ldi	r24, 0xC8	; 200
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9a 8b       	std	Y+18, r25	; 0x12
    21a8:	89 8b       	std	Y+17, r24	; 0x11
    21aa:	89 89       	ldd	r24, Y+17	; 0x11
    21ac:	9a 89       	ldd	r25, Y+18	; 0x12
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <main+0x894>
    21b2:	9a 8b       	std	Y+18, r25	; 0x12
    21b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b6:	8b 89       	ldd	r24, Y+19	; 0x13
    21b8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	9c 8b       	std	Y+20, r25	; 0x14
    21be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	8b 89       	ldd	r24, Y+19	; 0x13
    21c2:	9c 89       	ldd	r25, Y+20	; 0x14
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	69 f7       	brne	.-38     	; 0x21a2 <main+0x888>
    21c8:	14 c0       	rjmp	.+40     	; 0x21f2 <main+0x8d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	6d 89       	ldd	r22, Y+21	; 0x15
    21cc:	7e 89       	ldd	r23, Y+22	; 0x16
    21ce:	8f 89       	ldd	r24, Y+23	; 0x17
    21d0:	98 8d       	ldd	r25, Y+24	; 0x18
    21d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9c 8b       	std	Y+20, r25	; 0x14
    21dc:	8b 8b       	std	Y+19, r24	; 0x13
    21de:	8b 89       	ldd	r24, Y+19	; 0x13
    21e0:	9c 89       	ldd	r25, Y+20	; 0x14
    21e2:	98 8b       	std	Y+16, r25	; 0x10
    21e4:	8f 87       	std	Y+15, r24	; 0x0f
    21e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e8:	98 89       	ldd	r25, Y+16	; 0x10
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <main+0x8d0>
    21ee:	98 8b       	std	Y+16, r25	; 0x10
    21f0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				HSSD_voidSSDOff (SSD2);
    21f2:	80 91 7f 00 	lds	r24, 0x007F
    21f6:	90 91 80 00 	lds	r25, 0x0080
    21fa:	a0 91 81 00 	lds	r26, 0x0081
    21fe:	b0 91 82 00 	lds	r27, 0x0082
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 2e 0c 	call	0x185c	; 0x185c <HSSD_voidSSDOff>
    220a:	82 c0       	rjmp	.+260    	; 0x2310 <main+0x9f6>
				break;
			}
			else
				counter++;
    220c:	de 01       	movw	r26, r28
    220e:	ad 59       	subi	r26, 0x9D	; 157
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	fe 01       	movw	r30, r28
    2214:	ed 59       	subi	r30, 0x9D	; 157
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	8c 93       	st	X, r24
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a8 ec       	ldi	r26, 0xC8	; 200
    2224:	b2 e4       	ldi	r27, 0x42	; 66
    2226:	8b 87       	std	Y+11, r24	; 0x0b
    2228:	9c 87       	std	Y+12, r25	; 0x0c
    222a:	ad 87       	std	Y+13, r26	; 0x0d
    222c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a ef       	ldi	r20, 0xFA	; 250
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8f 83       	std	Y+7, r24	; 0x07
    2248:	98 87       	std	Y+8, r25	; 0x08
    224a:	a9 87       	std	Y+9, r26	; 0x09
    224c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224e:	6f 81       	ldd	r22, Y+7	; 0x07
    2250:	78 85       	ldd	r23, Y+8	; 0x08
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	2c f4       	brge	.+10     	; 0x2270 <main+0x956>
		__ticks = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	3f c0       	rjmp	.+126    	; 0x22ee <main+0x9d4>
	else if (__tmp > 65535)
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	4c f5       	brge	.+82     	; 0x22da <main+0x9c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2288:	6b 85       	ldd	r22, Y+11	; 0x0b
    228a:	7c 85       	ldd	r23, Y+12	; 0x0c
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <main+0x9b6>
    22b2:	88 ec       	ldi	r24, 0xC8	; 200
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <main+0x9a4>
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <main+0x998>
    22d8:	14 c0       	rjmp	.+40     	; 0x2302 <main+0x9e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <main+0x9e0>
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	89 83       	std	Y+1, r24	; 0x01
		HLED_voidLEDIOff(LED2);
		HSSD_voidSSDOff (SSD2);

		counter=0;
		HLED_voidLEDOn(LED3);
		while(counter<=9)
    2302:	fe 01       	movw	r30, r28
    2304:	ed 59       	subi	r30, 0x9D	; 157
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	8a 30       	cpi	r24, 0x0A	; 10
    230c:	08 f4       	brcc	.+2      	; 0x2310 <main+0x9f6>
    230e:	5c ce       	rjmp	.-840    	; 0x1fc8 <main+0x6ae>
			}
			else
				counter++;
			_delay_ms(100);
		}
		HLED_voidLEDIOff(LED3);
    2310:	60 91 78 00 	lds	r22, 0x0078
    2314:	70 91 79 00 	lds	r23, 0x0079
    2318:	80 91 7a 00 	lds	r24, 0x007A
    231c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <HLED_voidLEDIOff>
		HSSD_voidSSDOff (SSD2);
    2320:	80 91 7f 00 	lds	r24, 0x007F
    2324:	90 91 80 00 	lds	r25, 0x0080
    2328:	a0 91 81 00 	lds	r26, 0x0081
    232c:	b0 91 82 00 	lds	r27, 0x0082
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 2e 0c 	call	0x185c	; 0x185c <HSSD_voidSSDOff>
		counter=0;
    2338:	fe 01       	movw	r30, r28
    233a:	ed 59       	subi	r30, 0x9D	; 157
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	10 82       	st	Z, r1
    2340:	2d cb       	rjmp	.-2470   	; 0x199c <main+0x82>

00002342 <__prologue_saves__>:
    2342:	2f 92       	push	r2
    2344:	3f 92       	push	r3
    2346:	4f 92       	push	r4
    2348:	5f 92       	push	r5
    234a:	6f 92       	push	r6
    234c:	7f 92       	push	r7
    234e:	8f 92       	push	r8
    2350:	9f 92       	push	r9
    2352:	af 92       	push	r10
    2354:	bf 92       	push	r11
    2356:	cf 92       	push	r12
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	ca 1b       	sub	r28, r26
    236c:	db 0b       	sbc	r29, r27
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	09 94       	ijmp

0000237a <__epilogue_restores__>:
    237a:	2a 88       	ldd	r2, Y+18	; 0x12
    237c:	39 88       	ldd	r3, Y+17	; 0x11
    237e:	48 88       	ldd	r4, Y+16	; 0x10
    2380:	5f 84       	ldd	r5, Y+15	; 0x0f
    2382:	6e 84       	ldd	r6, Y+14	; 0x0e
    2384:	7d 84       	ldd	r7, Y+13	; 0x0d
    2386:	8c 84       	ldd	r8, Y+12	; 0x0c
    2388:	9b 84       	ldd	r9, Y+11	; 0x0b
    238a:	aa 84       	ldd	r10, Y+10	; 0x0a
    238c:	b9 84       	ldd	r11, Y+9	; 0x09
    238e:	c8 84       	ldd	r12, Y+8	; 0x08
    2390:	df 80       	ldd	r13, Y+7	; 0x07
    2392:	ee 80       	ldd	r14, Y+6	; 0x06
    2394:	fd 80       	ldd	r15, Y+5	; 0x05
    2396:	0c 81       	ldd	r16, Y+4	; 0x04
    2398:	1b 81       	ldd	r17, Y+3	; 0x03
    239a:	aa 81       	ldd	r26, Y+2	; 0x02
    239c:	b9 81       	ldd	r27, Y+1	; 0x01
    239e:	ce 0f       	add	r28, r30
    23a0:	d1 1d       	adc	r29, r1
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	ed 01       	movw	r28, r26
    23ae:	08 95       	ret

000023b0 <_exit>:
    23b0:	f8 94       	cli

000023b2 <__stop_program>:
    23b2:	ff cf       	rjmp	.-2      	; 0x23b2 <__stop_program>
